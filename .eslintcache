[{"C:\\Projects\\auction-online\\src\\reportWebVitals.js":"1","C:\\Projects\\auction-online\\src\\index.jsx":"2","C:\\Projects\\auction-online\\src\\App.jsx":"3","C:\\Projects\\auction-online\\src\\components\\item\\index.jsx":"4","C:\\Projects\\auction-online\\src\\components\\form\\index.jsx":"5","C:\\Projects\\auction-online\\src\\components\\statusNavbar\\index.jsx":"6","C:\\Projects\\auction-online\\src\\components\\rightSidebar\\index.jsx":"7"},{"size":362,"mtime":499162500000,"results":"8","hashOfConfig":"9"},{"size":500,"mtime":1608208255604,"results":"10","hashOfConfig":"9"},{"size":1555,"mtime":1608537207142,"results":"11","hashOfConfig":"9"},{"size":5853,"mtime":1608517620840,"results":"12","hashOfConfig":"9"},{"size":4513,"mtime":1608265202433,"results":"13","hashOfConfig":"9"},{"size":5060,"mtime":1608524413525,"results":"14","hashOfConfig":"9"},{"size":255,"mtime":1608537429730,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"14ph9wk",{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"18"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"18"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Projects\\auction-online\\src\\reportWebVitals.js",[],["34","35"],"C:\\Projects\\auction-online\\src\\index.jsx",[],"C:\\Projects\\auction-online\\src\\App.jsx",[],"C:\\Projects\\auction-online\\src\\components\\item\\index.jsx",["36"],"import React from \"react\";\r\nimport { Card, Image } from \"react-bootstrap\";\r\nimport styles from \"./Item.module.scss\";\r\nimport { AiFillCaretRight } from \"react-icons/ai\";\r\nconst icons = {\r\n  sword: require(\"../../assets/icons/sword-f.svg\"),\r\n  longsword: require(\"../../assets/icons/longsword.svg\"),\r\n  material: require(\"../../assets/icons/material.svg\")\r\n};\r\n\r\nexport default function Item(props) {\r\n  const options = {\r\n    opt1: props.maxOption1 && (props.option1 / props.maxOption1) * 100,\r\n    opt2: props.maxOption2 && (props.option2 / props.maxOption2) * 100,\r\n    opt3: props.maxOption3 && (props.option3 / props.maxOption3) * 100,\r\n    opt4: props.maxOption4 && (props.option4 / props.maxOption4) * 100,\r\n  };\r\n\r\n  console.log(options);\r\n  const statusBarColor = (width) => {\r\n    return width <= 40\r\n      ? `rgba(208,240,255,1),rgba(199,231,246,1)`\r\n      : width <= 60\r\n      ? `rgba(104,207,248,1),rgba(114,210,252,1)`\r\n      : `rgba(50,145,253,1),rgba(59,128,203,1)`;\r\n  };\r\n  return (\r\n    <Card className={styles.cardContainer}>\r\n      <Card.Header className={styles.cardHead}></Card.Header>\r\n      <Card.Body className={`${styles.cardBody} d-flex`}>\r\n        <div className={styles.leftColumn}>\r\n          <img\r\n            className={styles.itemImage}\r\n            src={`/images/items/${props.type && props.type}/${props.title}.png`}\r\n          />\r\n        </div>\r\n        <div className={styles.rightColumn}>\r\n          <Card.Title className={`d-flex flex-row ${styles.cardTitle}`}>\r\n            <Image\r\n              src={icons[props.category].default}\r\n              className={styles.itemCategory}\r\n            />\r\n            <span>{`${props.level && `Lv. ${props.level} `} ${\r\n              props.title\r\n            }`}</span>\r\n          </Card.Title>\r\n          <hr className={`w-100 ${styles.horizontalLine}`} />\r\n          <Card.Text className={`text-justify ${styles.cardDescription}`}>\r\n            {props.description}\r\n          </Card.Text>\r\n        </div>\r\n      </Card.Body>\r\n      <Card.Body>\r\n        <div className=\"d-flex justify-content-start flex-column\">\r\n          <div className=\"w-100\">\r\n            <p className=\"d-flex align-items-center justify-content-between mb-0\">\r\n              <span>\r\n                <AiFillCaretRight />\r\n                <span className=\"font-weight-bold\">{props.optionName1}</span>\r\n              </span>\r\n              <span>MAX +{props.maxOption1}</span>\r\n            </p>\r\n            <div className={`${styles.statusBar}`}>\r\n              <div className={`${styles.statusContainer}`}></div>\r\n              <div\r\n                style={{\r\n                  backgroundImage: `linear-gradient(${statusBarColor(\r\n                    options.opt1\r\n                  )})`,\r\n                  width: `${options.opt1}%`,\r\n                }}\r\n                className={`${styles.currentStatus}`}\r\n              ></div>\r\n              <span className={`font-weight-bold ${styles.statusText}`}>{props.option1}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"w-100\">\r\n            <p className=\"d-flex align-items-center justify-content-between mb-0\">\r\n              <span>\r\n                <AiFillCaretRight />\r\n                <span className=\"font-weight-bold\">{props.optionName2}</span>\r\n              </span>\r\n              <span>MAX +{props.maxOption2}</span>\r\n            </p>\r\n            <div className={`${styles.statusBar}`}>\r\n              <div className={`${styles.statusContainer}`}></div>\r\n              <div\r\n                style={{\r\n                  backgroundImage: `linear-gradient(${statusBarColor(\r\n                    options.opt2\r\n                  )})`,\r\n                  width: `${options.opt2}%`,\r\n                }}\r\n                className={`${styles.currentStatus}`}\r\n              ></div>\r\n              <span className={`font-weight-bold ${styles.statusText}`}>{props.option2}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"w-100\">\r\n            <p className=\"d-flex align-items-center justify-content-between mb-0\">\r\n              <span>\r\n                <AiFillCaretRight />\r\n                <span className=\"font-weight-bold\">{props.optionName3}</span>\r\n              </span>\r\n              <span>MAX +{props.maxOption3}</span>\r\n            </p>\r\n            <div className={`${styles.statusBar}`}>\r\n              <div className={`${styles.statusContainer}`}></div>\r\n              <div\r\n                style={{\r\n                  backgroundImage: `linear-gradient(${statusBarColor(\r\n                    options.opt3\r\n                  )})`,\r\n                  width: `${options.opt3}%`,\r\n                }}\r\n                className={`${styles.currentStatus}`}\r\n              ></div>\r\n              <span className={`font-weight-bold ${styles.statusText}`}>{props.option3}</span>\r\n            </div>\r\n          </div>\r\n          <div className=\"w-100\">\r\n            <p className=\"d-flex align-items-center justify-content-between mb-0\">\r\n              <span>\r\n                <AiFillCaretRight />\r\n                <span className=\"font-weight-bold\">{props.optionName4}</span>\r\n              </span>\r\n              <span>MAX +{props.maxOption4}</span>\r\n            </p>\r\n            <div className={`${styles.statusBar}`}>\r\n              <div className={`${styles.statusContainer}`}></div>\r\n              <div\r\n                style={{\r\n                  backgroundImage: `linear-gradient(${statusBarColor(\r\n                    options.opt4\r\n                  )})`,\r\n                  width: `${options.opt4}%`,\r\n                }}\r\n                className={`${styles.currentStatus}`}\r\n              ></div>\r\n              <span className={`font-weight-bold ${styles.statusText}`}>{props.option4}</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n","C:\\Projects\\auction-online\\src\\components\\form\\index.jsx",["37","38","39","40","41","42","43","44","45","46","47","48"],"import React,{useState} from \"react\";\r\nimport {\r\n  ButtonGroup,\r\n  Card,\r\n  Form,\r\n  ToggleButton,\r\n  Button,\r\n  Image,\r\n  Col,\r\n  Modal,\r\n  InputGroup,\r\n} from \"react-bootstrap\";\r\nimport Swal from \"sweetalert2\";\r\n\r\nexport default function FormWarehouse() {\r\n  const [modalShow, setModal] = useState(false);\r\n  const modalHandle = () => {\r\n    setData({});\r\n    setModal(false);\r\n  };\r\n\r\n  const [data, setData] = useState(null);\r\n  const WareHouseModal = (props) => {\r\n    const [highlight, setHighlight] = useState(0);\r\n    const [petData, setPetData] = useState({});\r\n\r\n    const swafirePost = () => {\r\n      setModal(false);\r\n      //addAnimal(AuthPayloads.access_token, petData);\r\n      Swal.fire({\r\n        title: `Pet successfully added!`,\r\n        icon: \"success\",\r\n        background: \"#1A3150\",\r\n        iconColor: \"yellow\",\r\n        showConfirmButton: false,\r\n\r\n        customClass: {\r\n          title: \"text-light\",\r\n        },\r\n      });\r\n    };\r\n\r\n    return (\r\n      <Modal\r\n        {...props}\r\n        size=\"lg\"\r\n        aria-labelledby=\"contained-modal-title-vcenter\"\r\n        centered\r\n      >\r\n        <Modal.Header className=\"px-5\">\r\n          <Modal.Title id=\"contained-modal-title-vcenter\">\r\n            Add Database\r\n          </Modal.Title>\r\n        </Modal.Header>\r\n        <Modal.Body className=\"d-flex f-col mx-3\">\r\n          <Card\r\n            className={`m-3 ${highlight == 1 ? \"selected-option-form\" : \"\"}`}\r\n            onClick={() => {\r\n              setHighlight(1);\r\n              setPetData({ ...petData, type: \"Dog\" });\r\n            }}\r\n          >\r\n            <Card.Title className=\"text-center\">Dog</Card.Title>\r\n          </Card>\r\n          <Card\r\n            onClick={() => {\r\n              setHighlight(2);\r\n              setPetData({ ...petData, type: \"Cat\" });\r\n            }}\r\n            className={`m-3 ${highlight == 2 ? \"selected-option-form\" : \"\"}`}\r\n          >\r\n            <Card.Title className=\"text-center\">Cat</Card.Title>\r\n          </Card>\r\n        </Modal.Body>\r\n        <Modal.Body>\r\n          <Form className=\"px-4\">\r\n            <Form.Group>\r\n              <Form.Label className=\"vet-title-2\">Name</Form.Label>\r\n              <Form.Control\r\n                type=\"text\"\r\n                placeholder=\"Enter Pet Name\"\r\n                name=\"name\"\r\n                value={petData.name}\r\n                onChange={(e) =>\r\n                  setPetData({ ...petData, name: e.target.value })\r\n                }\r\n              />\r\n            </Form.Group>\r\n            <Form.Group className=\"mb-4\" id=\"gender\">\r\n              <Form.Label className=\"vet-title-2\">Gender</Form.Label>\r\n              <ButtonGroup toggle name=\"radiogroup\" className=\"border\">\r\n                <ToggleButton\r\n                  key={1}\r\n                  type=\"radio\"\r\n                  variant={petData.gender == \"true\" ? \"primary\" : \"\"}\r\n                  name=\"gender\"\r\n                  value={true}\r\n                  checked={petData.gender == true}\r\n                  onChange={(e) =>\r\n                    setPetData({ ...petData, gender: e.currentTarget.value })\r\n                  }\r\n                >\r\n                  <span\r\n                    className={petData.gender == \"false\" ? \"text-white\" : \"\"}\r\n                  >\r\n                    Male\r\n                  </span>\r\n                </ToggleButton>\r\n                <ToggleButton\r\n                  key={2}\r\n                  type=\"radio\"\r\n                  variant={petData.gender == \"false\" ? \"pink\" : \"\"}\r\n                  name=\"gender\"\r\n                  value={false}\r\n                  checked={petData.gender == \"false\"}\r\n                  onChange={(e) =>\r\n                    setPetData({ ...petData, gender: e.currentTarget.value })\r\n                  }\r\n                >\r\n                  <span\r\n                    className={petData.gender == \"true\" ? \"text-white\" : \"\"}\r\n                  >\r\n                    Female\r\n                  </span>\r\n                </ToggleButton>\r\n              </ButtonGroup>\r\n            </Form.Group>\r\n          </Form>\r\n        </Modal.Body>\r\n        <Modal.Footer className=\"px-4\">\r\n          <Button onClick={swafirePost}>Add Pet</Button>\r\n          <Button variant=\"danger\" onClick={props.onHide}>\r\n            Close\r\n          </Button>\r\n        </Modal.Footer>\r\n      </Modal>\r\n    );\r\n  };\r\n  return (\r\n    <>\r\n      <Button onClick={() => setModal(true)} />\r\n      <WareHouseModal show={modalShow} onHide={() => modalHandle()} />\r\n    </>\r\n  );\r\n}\r\n","C:\\Projects\\auction-online\\src\\components\\statusNavbar\\index.jsx",["49"],"import React from \"react\";\r\nimport { Card, OverlayTrigger, Popover, Button } from \"react-bootstrap\";\r\nimport { FaAngleRight } from \"react-icons/fa\";\r\nimport NumberFormat from \"react-number-format\";\r\nimport styles from \"./statusNavbar.module.scss\";\r\nimport zeny from \"../../assets/currencies/zeny.png\";\r\nimport dust from \"../../assets/currencies/dust.png\";\r\n\r\nexport default function StatusNavbar() {\r\n  const currencies = [\r\n    { nick: \"Main Character\", zeny: 7000000, dust: 2000 },\r\n    { nick: \"Main Character\", zeny: 3000000, dust: 2000 },\r\n    { nick: \"Main Character\", zeny: 3000000, dust: 2000 },\r\n    { nick: \"Archer 60\", zeny: 6000000, dust: 2000 },\r\n  ];\r\n\r\n  const totalZeny =\r\n    currencies.length > 2\r\n      ? currencies.map(item => item.zeny).reduce((a, b) => a + b)\r\n      : currencies.zeny[0];\r\n\r\n  const totalDust =\r\n    currencies.length > 2\r\n      ? currencies.map(item => item.dust).reduce((a, b) => a + b)\r\n      : currencies.dust[0];\r\n  // console.log(totalZeny,totalDust)\r\n  return (\r\n    <Card className={`d-flex mx-5 mb-5 h-50 ${styles.navbarContainer}`}>\r\n      <Card.Body className=\"d-flex justify-content-around\">\r\n        <div className=\"d-flex align-items-center\">\r\n          <OverlayTrigger\r\n            placement=\"bottom\"\r\n            delay={{ show: 0, hide: 200 }}\r\n            overlay={\r\n              <Popover id=\"popover-basic\">\r\n                <Popover.Title as=\"h3\">\r\n                  <NumberFormat\r\n                    value={totalZeny}\r\n                    displayType={\"text\"}\r\n                    thousandSeparator={\".\"}\r\n                    decimalSeparator={\",\"}\r\n                    prefix={\"\"}\r\n                    renderText={(value) => <div>{value}</div>}\r\n                  />\r\n                </Popover.Title>\r\n                <Popover.Content>\r\n                  {currencies.map((item, idx) => (\r\n                    <span className=\"d-flex align-items-center\" key={idx}>\r\n                      {idx + 1}\r\n                      <FaAngleRight />\r\n                      <NumberFormat\r\n                        value={item.zeny}\r\n                        displayType={\"text\"}\r\n                        thousandSeparator={\".\"}\r\n                        decimalSeparator={\",\"}\r\n                        prefix={\"\"}\r\n                        renderText={(value) => <div>{value}</div>}\r\n                      />\r\n                    </span>\r\n                  ))}\r\n                </Popover.Content>\r\n              </Popover>\r\n            }\r\n          >\r\n            <div className=\"d-flex align-items-center\">\r\n              <img className={`${styles.currencies} mx-2`} src={zeny} alt=\"\" />\r\n              <span className={`font-weight-bold`}>\r\n                <NumberFormat\r\n                  value={totalZeny}\r\n                  displayType={\"text\"}\r\n                  thousandSeparator={\".\"}\r\n                  decimalSeparator={\",\"}\r\n                  prefix={\"\"}\r\n                  renderText={(value) => <div>{value}</div>}\r\n                />\r\n              </span>\r\n            </div>\r\n          </OverlayTrigger>\r\n        </div>\r\n        <div className=\"d-flex align-items-center\">\r\n          <OverlayTrigger\r\n            placement=\"bottom\"\r\n            delay={{ show: 0, hide: 200 }}\r\n            overlay={\r\n              <Popover id=\"popover-basic\">\r\n                <Popover.Title as=\"h3\">\r\n                  <NumberFormat\r\n                    value={totalDust}\r\n                    displayType={\"text\"}\r\n                    thousandSeparator={\".\"}\r\n                    decimalSeparator={\",\"}\r\n                    prefix={\"\"}\r\n                    renderText={(value) => <div>{value}</div>}\r\n                  />\r\n                </Popover.Title>\r\n                <Popover.Content>\r\n                  {currencies.map((item, idx) => (\r\n                    <span className=\"d-flex align-items-center\" key={idx}>\r\n                      {idx + 1}\r\n                      <FaAngleRight />\r\n                      <NumberFormat\r\n                        value={item.dust}\r\n                        displayType={\"text\"}\r\n                        thousandSeparator={\".\"}\r\n                        decimalSeparator={\",\"}\r\n                        prefix={\"\"}\r\n                        renderText={(value) => <div>{value}</div>}\r\n                      />\r\n                    </span>\r\n                  ))}\r\n                </Popover.Content>\r\n              </Popover>\r\n            }\r\n          >\r\n            <div className=\"d-flex align-items-center\">\r\n              <img className={`${styles.currencies} mx-2`} src={dust} alt=\"\" />\r\n              <span className={`font-weight-bold`}>\r\n                <NumberFormat\r\n                  value={totalDust}\r\n                  displayType={\"text\"}\r\n                  thousandSeparator={\".\"}\r\n                  decimalSeparator={\",\"}\r\n                  prefix={\"\"}\r\n                  renderText={(value) => <div>{value}</div>}\r\n                />\r\n              </span>\r\n            </div>\r\n          </OverlayTrigger>\r\n        </div>\r\n      </Card.Body>\r\n    </Card>\r\n  );\r\n}\r\n","C:\\Projects\\auction-online\\src\\components\\rightSidebar\\index.jsx",[],{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","severity":1,"message":"55","line":32,"column":11,"nodeType":"56","endLine":35,"endColumn":13},{"ruleId":"57","severity":1,"message":"58","line":8,"column":3,"nodeType":"59","messageId":"60","endLine":8,"endColumn":8},{"ruleId":"57","severity":1,"message":"61","line":9,"column":3,"nodeType":"59","messageId":"60","endLine":9,"endColumn":6},{"ruleId":"57","severity":1,"message":"62","line":11,"column":3,"nodeType":"59","messageId":"60","endLine":11,"endColumn":13},{"ruleId":"57","severity":1,"message":"63","line":22,"column":10,"nodeType":"59","messageId":"60","endLine":22,"endColumn":14},{"ruleId":"64","severity":1,"message":"65","line":57,"column":41,"nodeType":"66","messageId":"67","endLine":57,"endColumn":43},{"ruleId":"64","severity":1,"message":"65","line":70,"column":41,"nodeType":"66","messageId":"67","endLine":70,"endColumn":43},{"ruleId":"64","severity":1,"message":"65","line":95,"column":43,"nodeType":"66","messageId":"67","endLine":95,"endColumn":45},{"ruleId":"64","severity":1,"message":"65","line":98,"column":43,"nodeType":"66","messageId":"67","endLine":98,"endColumn":45},{"ruleId":"64","severity":1,"message":"65","line":104,"column":47,"nodeType":"66","messageId":"67","endLine":104,"endColumn":49},{"ruleId":"64","severity":1,"message":"65","line":112,"column":43,"nodeType":"66","messageId":"67","endLine":112,"endColumn":45},{"ruleId":"64","severity":1,"message":"65","line":115,"column":43,"nodeType":"66","messageId":"67","endLine":115,"endColumn":45},{"ruleId":"64","severity":1,"message":"65","line":121,"column":47,"nodeType":"66","messageId":"67","endLine":121,"endColumn":49},{"ruleId":"57","severity":1,"message":"68","line":2,"column":41,"nodeType":"59","messageId":"60","endLine":2,"endColumn":47},"no-native-reassign",["69"],"no-negated-in-lhs",["70"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'Image' is defined but never used.","Identifier","unusedVar","'Col' is defined but never used.","'InputGroup' is defined but never used.","'data' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Button' is defined but never used.","no-global-assign","no-unsafe-negation"]